from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from googletrans import Translator
import logging
import os
from dotenv import load_dotenv

load_dotenv()
API_TOKEN = os.getenv("BOT_TOKEN")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
translator = Translator()

user_modes = {}

def get_language_menu():
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("üá¨üáß –ê–Ω–≥–ª ‚Üí –†—É—Å", callback_data="en-ru"),
        InlineKeyboardButton("üá∑üá∫ –†—É—Å ‚Üí –ê–Ω–≥–ª", callback_data="ru-en")
    )
    return kb

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    user_modes[message.from_user.id] = "en-ru"
    await message.answer("–ü—Ä–∏–≤–µ—Ç, —Å–æ–ª–Ω—ã—à–∫–æ! –í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞:", reply_markup=get_language_menu())

@dp.callback_query_handler(lambda call: call.data in ["en-ru", "ru-en"])
async def mode_callback(call: types.CallbackQuery):
    current_mode = user_modes.get(call.from_user.id, "en-ru")

    if call.data == current_mode:
        # –ù–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –Ω–∏—á–µ–≥–æ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º
        await call.answer("–≠—Ç–æ—Ç —Ä–µ–∂–∏–º —É–∂–µ –≤—ã–±—Ä–∞–Ω üòä")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ä–µ–∂–∏–º
    user_modes[call.from_user.id] = call.data
    await call.answer(f"–†–µ–∂–∏–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {call.data.replace('-', ' ‚Üí ')}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    try:
        await call.message.edit_reply_markup(reply_markup=get_language_menu())
    except Exception as e:
        # –ü–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞, –µ—Å–ª–∏ –≤—Å—ë-—Ç–∞–∫–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")

@dp.message_handler()
async def translate_message(message: types.Message):
    mode = user_modes.get(message.from_user.id, "en-ru")
    src, dest = mode.split('-')

    try:
        result = translator.translate(message.text, src=src, dest=dest)
        await message.reply(f"üî§ –ü–µ—Ä–µ–≤–æ–¥:\n{result.text}")
    except Exception as e:
        await message.reply("–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚Ä¶ –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑, –∫–æ—Ç–∏–∫.")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
